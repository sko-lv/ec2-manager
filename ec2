#!/bin/bash
#set -x

COMMAND="$1"
CONFIG_FILE="./ec2config"
USERDATA_FILE="./userdata"
HELP_STRING="Usage: $(basename $0) [up|halt|reboot|destroy|ssh|status|status-all]\n
                  \tFile ./ec2config is mandatory. File ./userdata - optional." 


check_ec2config_file() {
# Check if the ec2config file exists
if [ ! -f "$1" ]; then
  echo "ERROR: $CONFIG_FILE file does not exist."
  exit 1
fi
}

check_tag() {
  # Check if TAG exists:
  aws ec2 describe-instances --filters "Name=tag:Name,Values=$1" \
          "Name=instance-state-name,Values=running,pending,stopped" \
          --query 'Reservations[].Instances[0].InstanceId' --output text
}

# Read variables from ec2config
if [ -f "$CONFIG_FILE" ]; then
  while IFS= read -r line; do
    # Remove everything after the first '#' to ignore comments
    line="$(echo ${line%%#*} | tr -d '"')"
    # Skip empty lines
    [[ -z "$line" ]] && continue
    # Split the line by '=' and set the variable
    IFS="=" read -r var value <<< "$line"
    export $var=$value
  done < "$CONFIG_FILE"
fi

NO_TAG_MSG="Instance tagged '$TAG' does not exist"

# Check if the required command-line arguments are provided
if [ $# -lt 1 ]; then
  echo -e $HELP_STRING
  exit 2
fi

case $COMMAND in
  up)
    check_ec2config_file $CONFIG_FILE 
    # Check if an instance with the given tag already exists
    EXISTING_INSTANCE=$(check_tag $TAG)
    if [ -n "$EXISTING_INSTANCE" ]; then
      # If an instance with the given tag exists, start it
      aws ec2 start-instances --instance-ids "$EXISTING_INSTANCE"
    else
      # If no instance with the given tag exists, create a new one with or w/o user data
        if [ -r "$USERDATA_FILE" ]; then
          # Use user data file if present
          aws ec2 run-instances --image-id $AMI --instance-type t2.micro --subnet-id $SUBNET \
                        --security-group-ids $SG --key-name $KEY_PAIR \
                        --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$TAG}]" \
                        --iam-instance-profile Name="$EC2_PROFILE" \
                        --instance-market-options 'MarketType=spot'  \
                        --user-data file://$USERDATA_FILE 
        else
          # Run instance w/o user data
          aws ec2 run-instances --image-id $AMI --instance-type t2.micro --subnet-id $SUBNET \
                        --security-group-ids $SG --key-name $KEY_PAIR \
                        --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$TAG}]" \
                        --iam-instance-profile Name="$EC2_PROFILE"
      fi
    fi
    ;;

  halt)
    check_ec2config_file $CONFIG_FILE
    # Stop an EC2 instance
    [ ! -n "$(check_tag $TAG)" ] && echo $NO_TAG_MSG && exit 3
    INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$TAG" \
                             "Name=instance-state-name,Values=running,pending" \
                             --query 'Reservations[].Instances[0].InstanceId' --output text)
    aws ec2 stop-instances --instance-ids $INSTANCE_ID
    ;;

  reboot)
    check_ec2config_file $CONFIG_FILE
    # Reboot an EC2 instance
    [ ! -n "$(check_tag $TAG)" ] && echo $NO_TAG_MSG && exit 3
    INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$TAG" \
                             "Name=instance-state-name,Values=running,pending,stopped" \
                             --query 'Reservations[].Instances[0].InstanceId' --output text)

    aws ec2 reboot-instances --instance-ids $INSTANCE_ID
    ;;

  destroy)
    check_ec2config_file $CONFIG_FILE
    # Terminate an EC2 instance
    [ ! -n "$(check_tag $TAG)" ] && echo $NO_TAG_MSG && exit 3
    INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$TAG" \
                             "Name=instance-state-name,Values=running,pending,stopped" \
                             --query 'Reservations[].Instances[0].InstanceId' --output text)

    aws ec2 terminate-instances --instance-ids $INSTANCE_ID
    ;;

  ssh)
    check_ec2config_file $CONFIG_FILE
    # SSH into an EC2 instance
    [ ! -n "$(check_tag $TAG)" ] && echo $NO_TAG_MSG && exit 3
    PUBLIC_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$TAG" \
                    "Name=instance-state-name,Values=running" \
                    --query 'Reservations[].Instances[0].PublicIpAddress' --output text)
    if [ -z "$PUBLIC_IP" ]; then
      echo "Instance not_found/pending/down or does not have a public IP."
      exit 3
    fi
    set -x
    ssh -i "$SSH_KEY_FILE" -o StrictHostKeyChecking=no $SSH_USER@$PUBLIC_IP
    set +x
    ;;

  status)
    check_ec2config_file $CONFIG_FILE
    # View the status of an EC2 instance by tag
    [ ! -n "$(check_tag $TAG)" ] && echo $NO_TAG_MSG && exit 3
    STATUS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$TAG" \
                     --query 'Reservations[].Instances[0].State.Name' --output text)
    echo "Instance(s) '$TAG' status is: $STATUS"
    ;;

  status-all)
    # View the status of all instances with their instance ID and external IP
    INSTANCES=$(aws ec2 describe-instances --query 'Reservations[].Instances')
    if [ -z "$INSTANCES" ]; then
      echo "No instances found."
      exit 3
    fi
    echo "$INSTANCES" | \
         jq -r '.[][] | "\(.Tags[0].Value)\t\t\(.State.Name)\t\(.InstanceId)\t\(.PublicIpAddress)"'
    ;;

  *)
    echo "Invalid command: $COMMAND"
    echo -e $HELP_STRING
    exit 2
    ;;
esac
